import os
import gzip
import shutil

def gzip_file(file_path):
    """
    Compress a file using gzip format.
    """
    if file_path.endswith('.gz'):
        print(f"Skipping {file_path}, already gzipped.")
        return
    
    try:
        if not os.path.exists(file_path):
            print(f"File {file_path} not found, skipping.")
            return
        
        print(f"File {file_path} exists, proceeding with compression.")
        print(f"File size: {os.path.getsize(file_path)} bytes")
        
        with open(file_path, 'rb') as f_in:
            with gzip.open(file_path + '.gz', 'wb') as f_out:
                shutil.copyfileobj(f_in, f_out)
        
        os.remove(file_path)
    
    except FileNotFoundError:
        print(f"File {file_path} was not found during compression, skipping.")
        return
    except Exception as e:
        print(f"Error compressing file {file_path}: {e}")
        return

def compress_files_in_folder(folder_path):
    """
    Compress all .tsv and .mtx files in the folder.
    """
    for root, _, files in os.walk(folder_path):
        for file in files:
            if file.endswith('.gz'):
                continue
            
            if file.endswith('.tsv') or file.endswith('.mtx'):
                file_path = os.path.join(root, file)
                print(f"Compressing {file_path} ...")
                gzip_file(file_path)

base_dir = '/path/'

for cancer_type in os.listdir(base_dir):
    cancer_type_path = os.path.join(base_dir, cancer_type)
    
    if os.path.isdir(cancer_type_path):
        for gsm_number in os.listdir(cancer_type_path):
            gsm_path = os.path.join(cancer_type_path, gsm_number)

compress_files_in_folder(gsm_path)
conda create --name scanpy_env python=3.8 scanpy -c bioconda -c conda-forge
conda activate scanpy_env

import scanpy as sc
import numpy as np
import os
from tqdm import tqdm

def preprocess_data(folder_path):
    # Load the data
    adata = sc.read_10x_mtx(folder_path, var_names='gene_symbols', cache=False)
    
    # Predict doublets using scrublet with a fixed random state for reproducibility
    sc.external.pp.scrublet(adata, random_state=112)
    
    # Filter out predicted doublets
    # Ensure 'predicted_doublet' is the correct column name added by scrublet to adata.obs
    if 'predicted_doublet' in adata.obs.columns:
        adata = adata[adata.obs['predicted_doublet'] == False].copy()
    else:
        print("Warning: 'predicted_doublet' column not found in adata.obs. Doublet filtering skipped.")
    
    # Continue with further preprocessing
    sc.pp.filter_cells(adata, min_genes=200)
    sc.pp.filter_genes(adata, min_cells=3)
    
    # Identify mitochondrial genes - adjusted for human data where mitochondrial genes start with 'MT-'
    adata.var['mt'] = adata.var_names.str.startswith('MT-')  # Adjusted for human mitochondrial gene nomenclature
    
    sc.pp.calculate_qc_metrics(adata, qc_vars=['mt'], percent_top=None, log1p=False, inplace=True)
    
    # Filter based on n_genes_by_counts and pct_counts_mt
    upper_lim = np.quantile(adata.obs.n_genes_by_counts.values, .98)
    adata = adata[adata.obs.n_genes_by_counts < upper_lim].copy()
    adata = adata[adata.obs.pct_counts_mt < 10].copy()
    
    return adata


data_path = '/mnt/sdb16t/scientificdata/data/'
cancer_types = os.listdir(data_path)
adata_objects = []

for cancer_type in cancer_types:
    cancer_path = os.path.join(data_path, cancer_type)
    gsm_numbers = os.listdir(cancer_path)
    for gsm_number in gsm_numbers:
        gsm_path = os.path.join(cancer_path, gsm_number)
        sample_types = os.listdir(gsm_path)
        for sample_type in tqdm(sample_types, desc=f"Processing {cancer_type}_{gsm_number}"):
            folder_path = os.path.join(gsm_path, sample_type)
            try:
                adata = preprocess_data(folder_path)
                prefix = f"{cancer_type}_{gsm_number}_{sample_type}_"
                adata.obs_names = [prefix + barcode for barcode in adata.obs_names]
                adata_objects.append(adata)
            except Exception as e:
                print(f"Error processing {folder_path}: {e}")

if adata_objects:
    all_data = sc.concat(adata_objects,join='outer')
    output_path = '/path/adata_qc.h5ad'
    all_data.write_h5ad(output_path)
else:
    print("No data processed.")

##Removal of ribosomal gene
adata = sc.read_h5ad('/path/adata_qc.h5ad')
ribosomal_genes = adata.var_names[adata.var_names.str.startswith(("RPS", "RPL"))]
non_ribosomal_genes = ~adata.var_names.str.startswith(("RPS", "RPL"))
adata = adata[:, non_ribosomal_genes].copy()
dir = '/path/'
adata.write(dir + 'adata_qcR.h5ad')
########################################################################
####python###############################################################
########################################################################

import scanpy as sc
import scvi
import os
import math
import itertools
import warnings
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
adata = sc.read_h5ad('/path/adata_qcR.h5ad')
dir = '/path/'

plt.close('all')
plt.rcParams['savefig.dpi'] = 300
plt.figure(figsize=(200, 100))
sc.pl.violin(
    adata,
    ["n_genes_by_counts", "total_counts", "pct_counts_mt"],
    jitter=0.4,
    multi_panel=True,
    show=False  
)

plt.tight_layout()
plt.savefig('/path/violin_plot1.pdf', format='pdf', bbox_inches='tight')
plt.savefig('/path/violin_plot1.png', format='png', bbox_inches='tight')
plt.close()

plt.close('all')
plt.rcParams['savefig.dpi'] = 300

plt.figure(figsize=(20, 10))
sc.pl.scatter(adata, x="total_counts", y="pct_counts_mt", show=False)  
plt.tight_layout()
plt.savefig('/path/total_counts_vs_pct_counts_mt.pdf', format='pdf', bbox_inches='tight')
plt.savefig('/path/total_counts_vs_pct_counts_mt.png', format='png', bbox_inches='tight')
plt.close()

plt.figure(figsize=(20, 10))
sc.pl.scatter(adata, x="total_counts", y="n_genes_by_counts", show=False)  
plt.tight_layout()
plt.savefig('/path/total_counts_vs_n_genes_by_counts.pdf', format='pdf', bbox_inches='tight')
plt.savefig('/path/total_counts_vs_n_genes_by_counts.png', format='png', bbox_inches='tight')
plt.close()

##batch
adata.obs['cell_identifier'] = adata.obs.index
def extract_batch(cell_identifier):
    parts = cell_identifier.split('_')
    return parts[2] if len(parts) > 2 else 'Unknown'
adata.obs['batch'] = adata.obs['cell_identifier'].apply(extract_batch)

batch_counts = adata.obs['batch'].value_counts()

batches_to_keep = adata.obs['batch'].value_counts()[lambda x: x >= 200].index
adata = adata[adata.obs['batch'].isin(batches_to_keep)].copy()

##Standardized data
adata.layers['counts'] = adata.X.copy()
sc.pp.normalize_total(adata, target_sum=1e4)
sc.pp.log1p(adata)
adata.raw = adata
import scipy.sparse
df = pd.DataFrame(adata.X[:5, :5].todense() if scipy.sparse.issparse(adata.X) else adata.X[:5, :5], 
                  index=adata.obs_names[:5], 
                  columns=adata.var_names[:5])
print(df)
##Finding highly variable genes
sc.pp.highly_variable_genes(adata, min_mean=0.0125, max_mean=3, min_disp=0.5)

plt.close('all')
plt.rcParams['savefig.dpi'] = 300
plt.figure(figsize=(20, 10))

highly_variable = adata.var['highly_variable']
colors = ['red' if is_high else 'blue' for is_high in highly_variable]

plt.scatter(
    adata.var['mean_disp'], 
    adata.var['dispersions_norm'],  
    c=colors,
    s=10,  
    alpha=0.7  
)
plt.xlabel('Mean Expression')
plt.ylabel('Normalized Dispersion')
plt.title('Highly Variable Genes')
plt.tight_layout()

plt.savefig('/path/highly_variable_genes.pdf', format='pdf', bbox_inches='tight')
plt.savefig('/path/highly_variable_genes.png', format='png', bbox_inches='tight')
plt.close()

print(adata.var.columns)
highly_variable = adata.var['highly_variable']
colors = ['#ff0000' if is_high else '#808080' for is_high in highly_variable]

plt.figure(figsize=(20, 10))
plt.scatter(
    adata.var['means'],  
    adata.var['dispersions_norm'],  
    c=colors,
    s=10,  
    alpha=0.7 
)
plt.xlabel('Mean Expression')
plt.ylabel('Normalized Dispersion')
plt.title('Highly Variable Genes')
plt.tight_layout()

plt.savefig('/path/highly_variable_genes_corrected.pdf', format='pdf', bbox_inches='tight')
plt.savefig('/path/highly_variable_genes_corrected.png', format='png', bbox_inches='tight')
plt.close()

adata = adata[:, adata.var.highly_variable]  
sc.pp.regress_out(adata, ['total_counts', 'pct_counts_mt'])  
sc.pp.scale(adata, max_value=10)


##PCA
sc.tl.pca(adata, svd_solver='arpack')
sc.pl.pca_variance_ratio(adata, log=True)
plt.savefig(dir+"pca_variance.pdf")
adata.write(dir + 'adata_PCA.h5ad')
adata = sc.read_h5ad('/path/adata_PCA.h5ad')
dir = '/path/'

##SCVI
scvi.model.SCVI.setup_anndata(adata, layer = "counts", categorical_covariate_keys=["batch"], continuous_covariate_keys=['pct_counts_mt', 'total_counts'])
model = scvi.model.SCVI(adata)
model.train()  
adata.obsm['X_scVI'] = model.get_latent_representation()
adata.layers['scvi_normalized'] = model.get_normalized_expression(library_size = 1e4)  
adata.write(dir + 'scvi.h5ad')
adata = sc.read_h5ad('/path/scvi.h5ad')

##Find neighbors
sc.pp.neighbors(adata, use_rep = 'X_scVI')
sc.tl.umap(adata)
sc.tl.tsne(adata)
sc.tl.leiden(adata, resolution = 0.1)
leiden_counts = adata.obs['leiden'].value_counts()
print(leiden_counts) 

dir = '/mnt/sdb16t/scientificdata/out/'
adata.write(dir + 'leiden_data.h5ad')


##umap and tsne

dir= '/mnt/sdb16t/scientificdata/out/'
plt.close('all')
plt.rcParams['savefig.dpi'] = 300
plt.figure(figsize=(20, 10))
sc.pl.tsne(adata, color='leiden', legend_loc='right margin',show=False)
plt.tight_layout()
plt.savefig(dir+"tsne_leiden.png",bbox_inches='tight')

plt.close('all')
plt.rcParams['savefig.dpi'] = 300
plt.figure(figsize=(20, 10))
sc.pl.umap(adata, color='leiden', legend_loc='right margin',show=False)
plt.tight_layout()
plt.savefig(dir+"umap_leiden.png",bbox_inches='tight')
adata.write(dir + 'all_data_processed.h5ad')

adata = sc.read_h5ad('/path/leiden_data.h5ad')
dir = '/path/'

##differential genes
sc.tl.rank_genes_groups(adata, 'leiden', method='wilcoxon')
sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False)
adata.write(dir + 'data_GEGs.h5ad')

dir = '/path/'
result = adata.uns['rank_genes_groups']
groups = result['names'].dtype.names
all_groups_df = pd.DataFrame()

for group in groups:
    group_data = pd.DataFrame({
        f"{group}_{key}": result[key][group]
        for key in ['names', 'pvals', 'logfoldchanges', 'scores']  
    })
    all_groups_df = pd.concat([all_groups_df, group_data], axis=1)

all_groups_df.to_csv('/path/all_groupsqu_data.csv', index=False)

leiden_rename_dict = {
    '0': 'NK/T',
    '1': 'Myeloid',
    '2': 'Fibroblast',
    '3': 'NK/T',
    '4': 'Endothelial',
    '5': 'B cell',
    '6': 'Epithelium',
    '7': 'Epithelium',
    '8': 'Undefine',
    '9': 'Undefine',
    '10': 'Epithelium',
    '11': 'Epithelium',
    '12': 'Mast cell',
    '13': 'Epithelium',
    '14': 'Neutrophil',
    '15': 'Osteoblast',
    '16': 'Plasma cell',
    '17': 'Acinar cell',
    '18': 'Melanoma cell'
}

adata.obs['leiden_renamed'] = adata.obs['leiden'].map(leiden_rename_dict)
print(adata.obs['leiden_renamed'].value_counts())
adata.write(dir + 'cluster_renamed.h5ad')

plt.close('all')
plt.rcParams['savefig.dpi'] = 300
plt.figure(figsize=(20, 10))
sc.pl.umap(adata, color='leiden_renamed', legend_loc='right margin',show=False)
plt.tight_layout()
plt.savefig(dir+"umap_leiden_renamed.png",bbox_inches='tight')

sc.pl.dotplot(
    adata,
    var_names=[
"CELA3A","CPA1","ALB",
"CD79A","MS4A1",
"EGFL7","PECAM1","ACKR1",
"KRT18","KRT19","EPCAM","CLDN4","KRT5","KRT17","KRT8","DSP",
"DCN","TAGLN","ACTA2","POSTN",
"MS4A2","TPSAB1","CPA3","TPSB2","KIT",
"MLANA","PRAME","SOX10","MITF",
"LYZ","CD68","ITGAX","CSF1R","C1QB",
"CD3D","CD3E","CD3G","KLRD1","NKG7",
"CSF3R","S100A8","S100A9","FCGR3B",
"COL1A1","IBSP","ALPL","RUNX2","COL1A2",
"IGHG1","MZB1"
], 
    groupby='leiden_renamed',
    standard_scale='var', 
    dot_max=1,  
    color_map='Blues'  
)

plt.savefig(dir + "rename.png", bbox_inches='tight')
plt.savefig(dir + "rename.pdf", bbox_inches='tight')
plt.close('all')

leiden_counts = adata.obs['leiden_renamed'].value_counts()
total_cells = leiden_counts.sum()
leiden_percentage = (leiden_counts / total_cells) * 100

custom_colors = [
'#E5D2DD', '#53A85F', '#F1BB72', '#F3B1A0', '#D6E7A3', '#57C3F3', '#476D87',
               '#E95C59', '#E59CC4', '#AB3282', '#23452F', '#BD956A', '#8C549C', '#585658',
               '#9FA3A8', '#E0D4CA', '#5F3D69', '#C5DEBA', '#58A4C3', '#E4C755', '#F7F398',
               '#AA9A59', '#E63863', '#E39A35', '#C1E6F3', '#6778AE', '#91D0BE', '#B53E2B',
               '#712820', '#DCC1DD', '#CCE0F5',  '#CCC9E6', '#625D9E', '#68A180', '#3A6963',
               '#968175'
]

plt.figure(figsize=(20, 20))
plt.pie(
    leiden_percentage,
    labels=[str(cluster) for cluster in leiden_counts.index],  
    autopct='%1.1f%%',  
    startangle=90,  
    colors=custom_colors,  
    wedgeprops={'edgecolor': 'black'},  
    textprops={'fontsize': 15}  
)


plt.title('Leiden Cluster Distribution', fontsize=16)

output_dir = '/path/'
plt.tight_layout()
plt.savefig(output_dir + 'leiden_cluster_pie_chart.pdf', format='pdf', bbox_inches='tight')
plt.savefig(output_dir + 'leiden_cluster_pie_chart.png', format='png', bbox_inches='tight')
plt.close()

adata.obs['cell_identifier'] = adata.obs['cell_identifier'].str.replace('-', '_')

def remove_last_part(cell_identifier):
    parts = cell_identifier.split('_')
    if len(parts) > 1:
        return '_'.join(parts[:-1])
    else:
        return cell_identifier

adata.obs['cell_identifier_group'] = adata.obs['cell_identifier'].apply(remove_last_part)

print(adata.obs['cell_identifier_group'].head())

def extract_last_part(cell_identifier_group):
    parts = cell_identifier_group.split('_')
    return parts[-1] if parts else 'Unknown'

adata.obs['sample_type'] = adata.obs['cell_identifier_group'].apply(extract_last_part)
print(adata.obs['sample_type'].head())
print(adata.obs['sample_type'].value_counts())

adata.write_h5ad(os.path.join(dir, 'selected_samplegroup_clusters.h5ad'))
adata.obs['cancer_type'] = adata.obs['cell_identifier'].str.split('_').str[0]
cancer_counts = adata.obs['cancer_type'].value_counts()
print(cancer_counts)


leiden_counts_nt = adata[adata.obs['sample_type'] == 'NT'].obs['leiden_renamed'].value_counts()
leiden_counts_pt = adata[adata.obs['sample_type'] == 'PT'].obs['leiden_renamed'].value_counts()

total_cells_nt = leiden_counts_nt.sum()
total_cells_pt = leiden_counts_pt.sum()

leiden_percentage_nt = (leiden_counts_nt / total_cells_nt) * 100
leiden_percentage_pt = (leiden_counts_pt / total_cells_pt) * 100
print(leiden_percentage_nt)

custom_colors = [
'#58A4C3', '#E4C755', '#F7F398',
               '#AA9A59', '#E63863', '#E39A35', '#C1E6F3', '#6778AE', '#91D0BE', '#B53E2B',
               '#712820', '#DCC1DD', '#CCE0F5',  '#CCC9E6', '#625D9E', '#68A180', '#3A6963',
               '#968175'
]

fig, axes = plt.subplots(1, 2, figsize=(12, 15))  

bottom = 0
for i, (cluster, value) in enumerate(zip(leiden_counts_nt.index, leiden_percentage_nt)):
    axes[0].bar(
        ['NT'],  
        [value],  
        bottom=bottom,
        color=custom_colors[i],  
        edgecolor='black',
        label=f'{cluster}'  
    )
    
    if value > 1:  
        axes[0].text(
            0,  
            bottom + value / 2,  
            f"{value:.2f}%",  
            ha='center', va='center', fontsize=10, color='white'
        )
    bottom += value  

axes[0].set_ylim(0, 100)
axes[0].set_xlim(-0.5, 0.5)
axes[0].set_xlabel('Clusters', fontsize=14)
axes[0].set_ylabel('Percentage of Cells (%)', fontsize=14)
axes[0].set_title('Stacked Bar Plot for Leiden Clusters (NT)', fontsize=16)
axes[0].tick_params(axis='both', which='major', labelsize=12)

bottom = 0
for i, (cluster, value) in enumerate(zip(leiden_counts_pt.index, leiden_percentage_pt)):
    axes[1].bar(
        ['PT'],  
        [value],  
        bottom=bottom,  
        color=custom_colors[i],  
        edgecolor='black',
        label=f'{cluster}'  
    )
    
    if value > 1:  
        axes[1].text(
            0,  
            bottom + value / 2,  
            f"{value:.2f}%",  
            ha='center', va='center', fontsize=10, color='white'
        )
    bottom += value  

axes[1].set_ylim(0, 100)
axes[1].set_xlim(-0.5, 0.5)
axes[1].set_xlabel('Clusters', fontsize=14)
axes[1].set_ylabel('Percentage of Cells (%)', fontsize=14)
axes[1].set_title('Stacked Bar Plot for Leiden Clusters (PT)', fontsize=16)
axes[1].tick_params(axis='both', which='major', labelsize=12)

axes[0].legend(
    loc='center left',
    bbox_to_anchor=(1, 0.5),
    title='Leiden Clusters',
    fontsize=10,
    title_fontsize=12
)
axes[1].legend(
    loc='center left',
    bbox_to_anchor=(1, 0.5),
    title='Leiden Clusters',
    fontsize=10,
    title_fontsize=12
)

plt.tight_layout()

output_dir = '/path/'
plt.savefig(output_dir + 'leiden_cluster_stacked_bar_nt_pt_with_legend.pdf', format='pdf', bbox_inches='tight')
plt.savefig(output_dir + 'leiden_cluster_stacked_bar_nt_pt_with_legend.png', format='png', bbox_inches='tight')






